name: Build Multi-Platform

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
  release:
    types: [published]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            bundle: deb,appimage
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            bundle: msi,nsis
          - os: macos-latest
            target: x86_64-apple-darwin
            bundle: dmg,app
          - os: macos-latest
            target: aarch64-apple-darwin
            bundle: dmg,app
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './package-lock.json'
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf
    
    - name: Install frontend dependencies
      run: npm install
    
    - name: Build Tauri app
      run: npm run tauri build -- --target ${{ matrix.target }} --bundles ${{ matrix.bundle }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
        TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
    
    - name: Upload artifacts (Linux)
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: linux-${{ matrix.target }}
        path: |
          src-tauri/target/${{ matrix.target }}/release/bundle/deb/*.deb
          src-tauri/target/${{ matrix.target }}/release/bundle/appimage/*.AppImage
    
    - name: Upload artifacts (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: windows-${{ matrix.target }}
        path: |
          src-tauri/target/${{ matrix.target }}/release/bundle/msi/*.msi
          src-tauri/target/${{ matrix.target }}/release/bundle/nsis/*.exe
    
    - name: Upload artifacts (macOS)
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: macos-${{ matrix.target }}
        path: |
          src-tauri/target/${{ matrix.target }}/release/bundle/dmg/*.dmg
          src-tauri/target/${{ matrix.target }}/release/bundle/macos/*.app
    
    - name: Upload to release (if release event)
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v1
      with:
        files: |
          src-tauri/target/${{ matrix.target }}/release/bundle/**/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Optional: Create a combined release with all platforms
  release:
    if: github.event_name == 'release'
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Display structure of downloaded files
      run: ls -la artifacts/
    
    - name: Create release info
      run: |
        echo "## ðŸš€ Multi-Platform Release" > release_notes.md
        echo "" >> release_notes.md
        echo "### ðŸ“¦ Available Downloads:" >> release_notes.md
        echo "- **Linux**: .deb package and .AppImage" >> release_notes.md
        echo "- **Windows**: .msi installer and .exe (NSIS)" >> release_notes.md
        echo "- **macOS**: .dmg and .app bundle (Intel & Apple Silicon)" >> release_notes.md
        echo "" >> release_notes.md
        echo "### ðŸ”§ Installation:" >> release_notes.md
        echo "- **Linux**: Download .deb and run \`sudo dpkg -i *.deb\` or use .AppImage directly" >> release_notes.md
        echo "- **Windows**: Download and run .msi or .exe installer" >> release_notes.md
        echo "- **macOS**: Download .dmg, mount and drag to Applications" >> release_notes.md
    
    - name: Update release with notes
      uses: softprops/action-gh-release@v1
      with:
        body_path: release_notes.md
        append_body: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}